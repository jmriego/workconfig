run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6- | sed 's/[^0-9.]//g')"

# set the default terminal
#set -g default-terminal "tmux-256color"
set -g default-terminal "screen-256color"
# set the prefix key
unbind C-b
if-shell '[ "$TERM_PROGRAM" = "iTerm.app" ] ' \
'set -g prefix C-@; bind C-@ send-prefix' \
'set -g prefix C-Space; bind C-Space send-prefix'

# mouse can be used to select panes
set -g mouse on

# don't rename windows automatically
set-option -g allow-rename off
set-option -g history-limit 10000

# Split panes similar to vim
# lowercase will set TMUX_VENV to 1. bash profile will check it and activate matching venv
bind v run "tmux set-environment -g TMUX_VENV 1; tmux split-window -h -c \"#{pane_current_path}\""
bind V run "tmux set-environment -gu TMUX_VENV; tmux split-window -h -c \"#{pane_current_path}\""
bind s run "tmux set-environment -g TMUX_VENV 1; tmux split-window -v -c \"#{pane_current_path}\""
bind S run "tmux set-environment -gu TMUX_VENV; tmux split-window -v -c \"#{pane_current_path}\""

bind c run "tmux set-environment -g TMUX_VENV 1; tmux new-window"
bind C run "tmux set-environment -gu TMUX_VENV; tmux new-window"

# First, I set tmux to use vi keys
if-shell '[ "$(echo "($TMUX_VERSION >= 2.1) && ($TMUX_VERSION < 2.4)" | bc)" = 1 ]' 'source-file $TMUX_CONF_DIR/tmux21.conf'

if-shell '[ "$(echo "($TMUX_VERSION >= 2.4) && ($TMUX_VERSION < 3.0)" | bc)" = 1 ]' 'source-file $TMUX_CONF_DIR/tmux24.conf'

if-shell '[ "$(echo "$TMUX_VERSION >= 3.0" | bc)" = 1 ]' 'source-file $TMUX_CONF_DIR/tmux30.conf'

unbind p; bind p paste-buffer
unbind t; bind t next-window
unbind T; bind T previous-window

# Choose buffer to paste with Prefix,C-r similar to vi register
bind C-r choose-buffer

# yanking text puts it in the system clipboard
# you can also Prefix,C-v to paste from the system clipboard
bind C-v run "$TMUX_CONF_DIR/system-paste.sh"

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Smart pane switching with awareness of vim splits
bind -n C-h run "$TMUX_CONF_DIR/switch-pane.sh left"
bind -n C-j run "$TMUX_CONF_DIR/switch-pane.sh down"
bind -n C-k run "$TMUX_CONF_DIR/switch-pane.sh up"
bind -n C-l run "$TMUX_CONF_DIR/switch-pane.sh right"
bind -n C-\\ run "$TMUX_CONF_DIR/switch-pane.sh last"

# bind C-S-Space as M-F12. Then M-F12 as send C-Space
# bind C-S-h/j/k/l as C-S-F9 to F12. Then map them as send C-h/j/k/l
set -ag terminal-overrides ',*:kf60=\033[32;6u:kf45=\033[72;6u:kf46=\033[74;6u:kf47=\033[75;6u:kf48=\033[76;6u'
bind -n M-F12 send-keys C-Space
# bind C-S-h/j/k/l as send those keys to current pane
bind -n C-S-F9 run "$TMUX_CONF_DIR/switch-pane.sh left outer"
bind -n C-S-F10 run "$TMUX_CONF_DIR/switch-pane.sh down outer"
bind -n C-S-F11 run "$TMUX_CONF_DIR/switch-pane.sh up outer"
bind -n C-S-F12 run "$TMUX_CONF_DIR/switch-pane.sh right outer"

# log pane
unbind C-l; bind C-l run "tmux pipe-pane -o 'cat >>~/tmux_output.#S:#I-#P' ; tmux display-message 'Toggling pane log #{?pane_pipe,on,off}'"

# Go to todo tmuxinator session and back
unbind C-t ; bind C-t run "$TMUX_CONF_DIR/switch-session.sh toggle-todo"
# if next session is todo skip it when switching to next/previous session
unbind ) ; bind -r ) run "$TMUX_CONF_DIR/switch-session.sh next"
unbind ( ; bind -r ( run "$TMUX_CONF_DIR/switch-session.sh prev"

# Prefer to leave this unmapped to use them in other apps
unbind C-p; unbind C-n

# Allow notifications. to create one run the following command:
# echo -e '\a'
set-window-option -g visual-bell on
set-window-option -g bell-action other

source-file $TMUX_CONF_DIR/tmuxline.conf
run-shell $TMUX_CONF_DIR/tmux-picker/tmux-picker.tmux
unbind C-p; bind -r C-p run-shell "$TMUX_CONF_DIR/tmux-picker/tmux-picker-helper.sh files"
unbind C-u; bind -r C-u run-shell "$TMUX_CONF_DIR/tmux-picker/tmux-picker-helper.sh urls"
unbind C-g; bind -r C-g run-shell "$TMUX_CONF_DIR/tmux-picker/tmux-picker-helper.sh git"
unbind C-j; bind -r C-j run-shell "$TMUX_CONF_DIR/tmux-picker/tmux-picker-helper.sh jira"
